# 📊 Enhanced Trading Dashboard mit Google Sheets Integration

Ein vollautomatisches Trading Dashboard, das alle deine Subaccounts von Bybit und Blofin überwacht, Trades in Google Sheets importiert und umfassende Performance-Analysen erstellt.

## 🚀 Features

### ✅ Was das Dashboard kann:
- **Multi-Exchange Support**: Bybit + Blofin APIs
- **11 Subaccounts**: Automatische Überwachung aller Trading-Accounts
- **Google Sheets Integration**: Alle Trades werden automatisch in Google Sheets gespeichert
- **Coin Performance Analytics**: Detaillierte Strategien-Analyse pro Coin und Account
- **Live Dashboard**: Echtzeit-Übersicht mit Performance-Charts
- **Auto-Import**: Vollautomatischer Import neuer Trades
- **Performance Scoring**: KI-basierte Bewertung aller Trading-Strategien

### 📈 Dashboard Übersicht:
- **Account Balance**: Live-Salden aller Subaccounts
- **Performance Charts**: 30-Tage Verlaufscharts
- **Position Monitoring**: Offene Positionen mit PnL
- **Coin Performance Table**: Detaillierte Statistiken pro Symbol/Strategie
- **Import Controls**: Ein-Klick Import-Management

## 🔧 Setup & Installation

### 1. Repository Setup
```bash
# Lade alle Dateien herunter
# enhanced_trade_importer.py
# enhanced_web_dashboard.py  
# setup_trading_dashboard.py
# requirements.txt
# render.yaml
```

### 2. Python Dependencies
```bash
pip install -r requirements.txt
```

### 3. Environment Variables Setup
```bash
# Erstelle .env Template
python setup_trading_dashboard.py --create-env

# Kopiere und bearbeite
cp .env.template .env
nano .env
```

### 4. Benötigte API-Schlüssel

#### Google Sheets:
- `GOOGLE_SERVICE_ACCOUNT_JSON`: Service Account JSON
- `GOOGLE_SHEET_ID`: Google Sheet ID

#### Bybit APIs (alle Subaccounts):
- `BYBIT_INCUBATORZONE_API_KEY` + `BYBIT_INCUBATORZONE_API_SECRET`
- `BYBIT_MEMESTRATEGIES_API_KEY` + `BYBIT_MEMESTRATEGIES_API_SECRET`
- `BYBIT_ETHAPESTRATEGIES_API_KEY` + `BYBIT_ETHAPESTRATEGIES_API_SECRET`
- `BYBIT_ALTSSTRATEGIES_API_KEY` + `BYBIT_ALTSSTRATEGIES_API_SECRET`
- `BYBIT_SOLSTRATEGIES_API_KEY` + `BYBIT_SOLSTRATEGIES_API_SECRET`
- `BYBIT_BTCSTRATEGIES_API_KEY` + `BYBIT_BTCSTRATEGIES_API_SECRET`
- `BYBIT_CORESTRATEGIES_API_KEY` + `BYBIT_CORESTRATEGIES_API_SECRET`
- `BYBIT_2K_API_KEY` + `BYBIT_2K_API_SECRET`
- `BYBIT_1K_API_KEY` + `BYBIT_1K_API_SECRET`
- `BYBIT_CLAUDE_PROJEKT_API_KEY` + `BYBIT_CLAUDE_PROJEKT_API_SECRET`

#### Blofin API:
- `BLOFIN_API_KEY`
- `BLOFIN_API_SECRET`
- `BLOFIN_API_PASSPHRASE`

## 🎯 Erste Schritte

### Automatisches Setup:
```bash
# Vollständiges Setup (empfohlen)
python setup_trading_dashboard.py --full-setup

# Oder Schritt für Schritt:
python setup_trading_dashboard.py --check-env      # Prüfe APIs
python setup_trading_dashboard.py --test-sheets    # Test Google Sheets
python setup_trading_dashboard.py --demo-data      # Erstelle Demo-Daten
```

### Erster Trade-Import:
```bash
# Vollständiger Import (alle 6 Monate Daten)
python enhanced_trade_importer.py --mode=full

# Nur neue Trades (für regelmäßige Updates)
python enhanced_trade_importer.py --mode=update

# Nur Performance neu berechnen
python enhanced_trade_importer.py --performance
```

### Dashboard Starten:
```bash
python enhanced_web_dashboard.py
```
- Öffne: http://localhost:10000
- Login: `admin` / `deinpasswort123`

## 📊 Dashboard Funktionen

### Import Controls
- **Quick Update**: Importiert nur neue Trades (5-10 Min)
- **Full Import**: Vollständiger Re-Import (15-30 Min)
- **Custom Import**: Spezifische Accounts oder Modi
- **Import History**: Log aller Import-Vorgänge

### Performance Analytics
Das Dashboard zeigt für jeden Account/Coin:
- **30-Tage Trades**: Anzahl Trades im letzten Monat
- **Win Rate**: Prozentsatz gewinnender Trades
- **PnL**: Profit/Loss absolut und prozentual
- **Profit Factor**: Verhältnis Gewinne zu Verlusten
- **Performance Score**: KI-basierte Bewertung (0-100)
- **Status**: Active/Inactive basierend auf Trading-Aktivität

### Coin Performance Tabelle
Sortiert nach Accounts:
1. **Claude Projekt**: Echte Live-Daten
2. **7 Tage Performer**: Blofin Live-Daten
3. **Alle Bybit Subaccounts**: Automatisch gruppiert

## 🔄 Automatisierung

### Tägliche Updates:
```bash
# Crontab für automatische Updates
0 8 * * * /path/to/python /path/to/enhanced_trade_importer.py --mode=update
```

### Dashboard Auto-Refresh:
Das Dashboard aktualisiert sich automatisch:
- **Live Balance**: Alle 5 Minuten
- **Charts**: Bei jedem Seitenaufruf
- **Performance**: Nach jedem Import

## 📁 Google Sheets Struktur

Das System erstellt automatisch:

### Trade Worksheets (pro Account):
- `Claude_Trades`
- `Blofin_Trades` 
- `Incubator_Trades`
- `Meme_Trades`
- `Ethape_Trades`
- etc.

### Performance Summary:
- Zentrale Tabelle mit allen Coin-Performance-Daten
- Wird automatisch bei jedem Import aktualisiert
- Basis für Dashboard-Analysen

## 🔧 Erweiterte Konfiguration

### Startkapital anpassen:
```python
# In beiden Dateien: enhanced_trade_importer.py & enhanced_web_dashboard.py
startkapital = {
    "Incubatorzone": 400.00,
    "Memestrategies": 800.00,
    # ... deine Werte
}
```

### Performance Scoring anpassen:
```python
# In enhanced_trade_importer.py, Funktion _calculate_symbol_performance
# Faktoren: Win Rate (40%), Profit Factor (30%), PnL (20%), Consistency (10%)
win_rate_score = min(month_win_rate / 80 * 40, 40)
pf_score = min(month_profit_factor / 3 * 30, 30)
# ...
```

## 🚨 Troubleshooting

### Häufige Probleme:

#### "API Key fehlt":
```bash
# Prüfe Umgebungsvariablen
python setup_trading_dashboard.py --check-env
```

#### "Google Sheets Verbindung fehlgeschlagen":
```bash
# Test Google Sheets
python setup_trading_dashboard.py --test-sheets
```

#### "Keine Performance-Daten":
```bash
# Erstelle Demo-Daten zum Testen
python setup_trading_dashboard.py --demo-data

# Oder führe Performance-Berechnung aus
python enhanced_trade_importer.py --performance
```

#### "Import hängt":
- Prüfe API Rate Limits
- Verwende `--mode=update` statt `--mode=full`
- Prüfe Internet-Verbindung

### Logs überprüfen:
```bash
# Import-Logs
python enhanced_trade_importer.py --mode=update 2>&1 | tee import.log

# Dashboard-Logs
python enhanced_web_dashboard.py 2>&1 | tee dashboard.log
```

## 🌐 Deployment (Render.com)

Das Dashboard ist bereit für Render.com:

1. **Repository**: Pushe alle Dateien zu GitHub
2. **Render Setup**: 
   - Service Type: Web Service
   - Build Command: `pip install -r requirements.txt`
   - Start Command: `python enhanced_web_dashboard.py`
3. **Environment Variables**: Alle API-Schlüssel in Render hinzufügen
4. **Automatic Deploy**: Bei jedem Push automatisch deployed

## 📈 Performance Metriken

### Account-Level:
- **Balance**: Aktueller Kontostand
- **PnL**: Profit/Loss seit Start
- **PnL %**: Performance in Prozent
- **Status**: Online/Offline basierend auf API-Verfügbarkeit

### Coin-Level:
- **Total Trades**: Gesamtanzahl Trades
- **30D Win Rate**: Gewinnrate der letzten 30 Tage
- **30D PnL**: Profit/Loss der letzten 30 Tage
- **7D PnL**: Performance der letzten Woche
- **Profit Factor**: Gewinne / Verluste Verhältnis
- **Performance Score**: Komposite Score (0-100)

### Scoring-Algorithmus:
```
Score = Win Rate (40%) + Profit Factor (30%) + PnL Performance (20%) + Consistency (10%)

Kategorien:
- 90-100: Excellent (Grün)
- 70-89:  Good (Gelb)
- 40-69:  Average (Orange)
- 0-39:   Poor (Rot)
```

## 🔐 Sicherheit

- **API Permissions**: Verwende Read-Only APIs wo möglich
- **Environment Variables**: Niemals API-Schlüssel im Code
- **Google Sheets**: Service Account mit minimalen Rechten
- **Dashboard Login**: Ändere Standard-Passwort

## 🤝 Support

Bei Problemen:
1. Prüfe Logs und Error Messages
2. Verwende Setup-Script für Diagnose
3. Teste einzelne Komponenten isoliert
4. Prüfe API-Verbindungen manuell

## 📝 Changelog

### v2.0 - Enhanced Version:
- ✅ Google Sheets Integration
- ✅ Echte Coin Performance Analytics
- ✅ Multi-Account Performance Scoring
- ✅ Automatische Demo-Daten Erstellung
- ✅ Setup-Script für einfache Installation
- ✅ Verbesserte Error Handling
- ✅ Performance Summary Worksheet

### v1.0 - Original Version:
- ✅ Multi-Exchange Support
- ✅ Live Dashboard
- ✅ Basic Performance Charts

## 🎯 Roadmap

- [ ] **Mobile App**: React Native Version
- [ ] **Telegram Bot**: Notifications und Commands
- [ ] **ML Predictions**: KI-basierte Trade-Vorhersagen
- [ ] **Risk Management**: Automatische Alerts
- [ ] **Portfolio Optimization**: Asset Allocation Vorschläge

---

**🚀 Happy Trading! 📈**
